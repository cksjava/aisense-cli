#!/bin/bash

# Version of the aisense CLI
VERSION="1.0.3"

# URL for the latest aisense script in the GitHub repository
AISENSE_URL="https://raw.githubusercontent.com/cksjava/aisense-cli/master/aisense"

# Installation directory (usually /usr/local/bin)
INSTALL_DIR="/usr/local/bin"

# Function to display version
show_version() {
    echo "aisense CLI version $VERSION"
}

# Function to display help for 'app create' command
app_create_help() {
    echo "Usage: aisense app create [app-name]"
    echo ""
    echo "This command clones the aisense-dashboard-app GitHub repository, renames the app, and installs dependencies."
    echo "Example:"
    echo "  aisense app create my-new-app"
}

# Function to create a new app by cloning and configuring the repository
app_create() {
    if [ -z "$1" ]; then
        echo "Error: App name is required"
        exit 1
    fi

    APP_NAME=$1
    REPO_URL="https://github.com/cksjava/aisense-dashboard-app.git"

    # Clone the repository with the name provided as app name
    echo "Cloning the repository into $APP_NAME..."
    git clone "$REPO_URL" "$APP_NAME"

    if [ $? -ne 0 ]; then
        echo "Error: Failed to clone the repository."
        exit 1
    fi

    # Change directory to the newly cloned app
    cd "$APP_NAME" || exit

    # Use sed to rename the app from aisense-ui to the provided app name
    echo "Renaming the app to $APP_NAME..."
    sed -i "s/aisense-ui/$APP_NAME/g" package.json

    # Run npm install to install dependencies
    echo "Installing dependencies..."
    npm install

    if [ $? -eq 0 ]; then
        echo "App $APP_NAME created and dependencies installed successfully!"
    else
        echo "Error: Failed to install dependencies."
        exit 1
    fi
}

# Function to create a platform
platform_create() {
    if [ -z "$1" ]; then
        echo "Error: Platform name is required"
        exit 1
    fi

    PLATFORM_NAME=$1

    # Create directory with platform name
    echo "Creating platform directory $PLATFORM_NAME..."
    mkdir "$PLATFORM_NAME"

    if [ $? -ne 0 ]; then
        echo "Error: Failed to create directory $PLATFORM_NAME."
        exit 1
    fi

    # Change directory to platform name
    cd "$PLATFORM_NAME" || exit

    # List of repositories to clone
    REPOS=(
        "git@54.176.75.12:/home/git/repositories/aisense-admin-console"
        "git@54.176.75.12:/home/git/repositories/aisense-agent-service"
        "git@54.176.75.12:/home/git/repositories/aisense-client"
        "git@54.176.75.12:/home/git/repositories/aisense-token-server"
    )

    # Clone repositories without the .git directory
    for REPO in "${REPOS[@]}"; do
        REPO_NAME=$(basename "$REPO" .git)  # Get the repo name
        echo "Cloning $REPO into $REPO_NAME..."

        # Clone the repo into a temporary directory
        git clone --depth 1 "$REPO" "$REPO_NAME"

        if [ $? -ne 0 ]; then
            echo "Error: Failed to clone repository $REPO."
            exit 1
        fi

        # Remove the .git directory to hide the remote
        echo "Removing .git directory from $REPO_NAME..."
        rm -rf "$REPO_NAME/.git"

        # Initialize a new Git repository
        echo "Initializing new Git repository in $REPO_NAME..."
        cd "$REPO_NAME"
        git init
        cd ..

    done

    echo "Platform $PLATFORM_NAME created with all repositories."
}

# Function to update the aisense CLI
update_cli() {
    echo "Updating aisense CLI..."

    # Download the latest version of aisense CLI with a timestamp query to avoid cache issues
    TMP_FILE="/tmp/aisense_latest"
    TIMESTAMP=$(date +%s)  # Current timestamp
    curl -L "$AISENSE_URL?timestamp=$TIMESTAMP" -o "$TMP_FILE"

    if [ $? -eq 0 ]; then
        # Use sudo to move the file to /usr/local/bin
        sudo mv "$TMP_FILE" "$INSTALL_DIR/aisense"
        
        # Make the new script executable
        sudo chmod +x "$INSTALL_DIR/aisense"

        echo "aisense CLI has been updated to the latest version!"
    else
        echo "Error: Failed to download the latest version of aisense CLI."
        exit 1
    fi
}

# Main command parsing
case "$1" in
    -v|--version)
        show_version
        ;;
    app)
        if [ "$2" = "create" ]; then
            if [ "$3" = "--help" ]; then
                app_create_help
            else
                app_create "$3"
            fi
        else
            echo "Unknown command: $2"
            echo "Use 'aisense app create --help' for usage information."
        fi
        ;;
    platform)
        if [ "$2" = "create" ]; then
            platform_create "$3"
        else
            echo "Unknown command: $2"
            echo "Use 'aisense platform create [platform-name]' to create a platform."
        fi
        ;;
    cli)
        if [ "$2" = "update" ]; then
            update_cli
        else
            echo "Unknown command: $2"
            echo "Use 'aisense cli update' to update the CLI."
        fi
        ;;
    *)
        echo "Unknown command: $1"
        echo "Use 'aisense --help' for more information."
        ;;
esac
